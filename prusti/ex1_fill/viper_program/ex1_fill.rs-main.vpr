function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate i32(self: Ref) 

predicate tuple0$(self: Ref) {
  true
}

method m_main() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var _1: Ref
  var _t2: Ref
  label start
  // ========== start ==========
  
  // Def path: "ex1_fill::main"
  
  // Span: ex1_fill.rs:94:1: 96:2 (#0)
  
  __t0 := false
  __t1 := false
  // Preconditions:
  
  label pre
  // ========== bb0 ==========
  
  __t0 := true
  // [mir] StorageLive(_1)
  
  // [mir] _1 = test(const 0_i32) -> [return: bb1, unwind: bb2]
  
  label l0
  _t2 := builtin$havoc_ref()
  inhale acc(i32(_t2), write)
  assert true
  exhale acc(i32(_t2), write)
  _1 := builtin$havoc_ref()
  inhale acc(tuple0$(_1), write)
  inhale true
  label l1
  // ========== bb1 ==========
  
  __t1 := true
  // [mir] StorageDead(_1)
  
  // [mir] _0 = const ()
  
  // [mir] return
  
  // ========== return ==========
  
  // Target of any 'return' statement.
  
  // Exhale postcondition
  
  label l3
  // Fold predicates for &mut args and transfer borrow permissions to old
  
  // Fold the result
  
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  
  // Assert possible strengthening
  
  // Assert functional specification of postcondition
  
  // Assert type invariants
  
  assert true
  // Exhale permissions of postcondition (1/3)
  
  // Exhale permissions of postcondition (2/3)
  
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
